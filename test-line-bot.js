// üß™ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö LINE Bot ‡πÉ‡∏ô‡πÇ‡∏´‡∏°‡∏î development

const { exec } = require('child_process');
const util = require('util');
const execAsync = util.promisify(exec);

async function testLineBot() {
  const testCases = [
    {
      name: '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢ - ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö 1',
      message: '50 ‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡πÅ‡∏ü',
      expected: '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢ 50 ‡∏ö‡∏≤‡∏ó ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà ‡∏≠‡∏≤‡∏´‡∏≤‡∏£/‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°'
    },
    {
      name: '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢ - ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö 2', 
      message: '‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô 500 ‡∏ö‡∏≤‡∏ó',
      expected: '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢ 500 ‡∏ö‡∏≤‡∏ó ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà ‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á'
    },
    {
      name: '‡∏î‡∏π‡∏™‡∏£‡∏∏‡∏õ',
      message: '‡∏™‡∏£‡∏∏‡∏õ',
      expected: '‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô'
    },
    {
      name: '‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠',
      message: '‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠',
      expected: '‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô'
    }
  ];

  console.log('üß™ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö LINE Bot...\n');

  for (const testCase of testCases) {
    console.log(`üìù ${testCase.name}`);
    console.log(`   ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: "${testCase.message}"`);
    
    try {
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á mock request
      const mockBody = {
        events: [{
          type: 'message',
          message: {
            type: 'text',
            text: testCase.message
          },
          source: {
            type: 'user',
            userId: 'test-user-123'
          },
          replyToken: 'test-reply-token'
        }]
      };

      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å webhook ‡∏ú‡πà‡∏≤‡∏ô curl
      const curlCommand = `curl -s -X POST http://localhost:3002/api/webhook \\
        -H "Content-Type: application/json" \\
        -H "x-line-signature: test-signature" \\
        -w "%{http_code}" \\
        -d '${JSON.stringify(mockBody).replace(/'/g, "'\\''")}' 2>/dev/null`;

      const { stdout, stderr } = await execAsync(curlCommand);
      
      // ‡∏î‡∏∂‡∏á status code ‡∏à‡∏≤‡∏Å curl response
      const statusCode = stdout.slice(-3);
      
      if (statusCode === '200') {
        console.log(`   ‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (Status: ${statusCode})`);
      } else {
        console.log(`   ‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î (Status: ${statusCode})`);
        if (stderr) console.log(`   Error details: ${stderr}`);
      }
    } catch (error) {
      console.log(`   ‚ùå Error: ${error}`);
    }
    
    console.log(`   üéØ ‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á: ${testCase.expected}\n`);
  }

  console.log('üéâ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!');
}

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ñ‡πâ‡∏≤‡∏£‡∏±‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
if (require.main === module) {
  testLineBot().catch(console.error);
}

module.exports = { testLineBot };
