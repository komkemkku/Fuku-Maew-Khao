import { NextRequest, NextResponse } from 'next/server';
import { WebhookRequestBody, validateSignature, Client, Message } from '@line/bot-sdk';
import { LineService } from '../../../lib/line-service';
import { DatabaseService } from '../../../lib/database';

// ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö LINE
const lineConfig = {
    channelAccessToken: process.env.LINE_CHANNEL_ACCESS_TOKEN || '',
    channelSecret: process.env.LINE_CHANNEL_SECRET || '',
};

const client = new Client(lineConfig);

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å LINE
async function getDisplayName(userId: string): Promise<string | undefined> {
    try {
        const profile = await client.getProfile(userId);
        return profile.displayName;
    } catch (error) {
        console.error('Error getting user profile:', error);
        return undefined;
    }
}

// GET method handler ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö health check
export async function GET() {
    return NextResponse.json({ 
        status: 'ok', 
        message: 'LINE Bot Webhook is running',
        timestamp: new Date().toISOString()
    });
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö Request ‡∏à‡∏≤‡∏Å LINE
export async function POST(req: NextRequest) {
    try {
        const body: WebhookRequestBody = await req.json();
        const signature = req.headers.get('x-line-signature') || '';

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤ Request ‡∏°‡∏≤‡∏à‡∏≤‡∏Å LINE ‡∏à‡∏£‡∏¥‡∏á‡πÜ
        if (!validateSignature(JSON.stringify(body), lineConfig.channelSecret, signature)) {
            console.error('Invalid signature');
            return new NextResponse('Invalid signature', { status: 401 });
        }

        console.log('‚úÖ Signature validated');
        console.log('Received events:', JSON.stringify(body.events, null, 2));

        // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞ event
        for (const event of body.events) {
            try {
                if (event.type === 'message' && event.message.type === 'text') {
                    const userId = event.source.userId;
                    if (!userId) continue;
                    
                    const userMessage = event.message.text;
                    const displayName = event.source.type === 'user' 
                        ? await getDisplayName(userId) 
                        : undefined;

                    console.log(`User ${userId} sent message: ${userMessage}`);
                    
                    // Auto-register user ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö (‡∏Å‡∏£‡∏ì‡∏µ‡∏Ç‡πâ‡∏≤‡∏° follow event)
                    try {
                        await DatabaseService.createUser(userId, displayName);
                    } catch (error) {
                        // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏™‡∏î‡∏á error ‡∏ñ‡πâ‡∏≤ user ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
                        console.log(`User ${userId} already exists or registration failed:`, error);
                    }

                    // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
                    const responseMessages = await LineService.handleMessage(
                        userMessage, 
                        userId, 
                        displayName
                    );

                    // ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
                    if (event.replyToken) {
                        await LineService.replyMessage(event.replyToken, responseMessages);
                    }
                }
                else if (event.type === 'message' && event.message.type === 'sticker') {
                    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ï‡∏¥‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå
                    const userId = event.source.userId;
                    if (!userId) continue;
                    
                    const stickerMessage = event.message;

                    console.log(`User ${userId} sent sticker: packageId=${stickerMessage.packageId}, stickerId=${stickerMessage.stickerId}`);

                    // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏™‡∏ï‡∏¥‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
                    const responseMessages = LineService.handleStickerMessage(
                        stickerMessage.packageId, 
                        stickerMessage.stickerId
                    );

                    // ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
                    if (event.replyToken) {
                        await LineService.replyMessage(event.replyToken, responseMessages);
                    }
                }
                else if (event.type === 'postback') {
                    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ postback events ‡∏à‡∏≤‡∏Å‡∏õ‡∏∏‡πà‡∏°
                    const userId = event.source.userId;
                    if (!userId) continue;
                    
                    const postbackData = event.postback.data;
                    console.log(`User ${userId} pressed button: ${postbackData}`);

                    // ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• action ‡∏à‡∏≤‡∏Å‡∏õ‡∏∏‡πà‡∏°
                    const params = new URLSearchParams(postbackData);
                    const action = params.get('action');
                    
                    // ‡πÉ‡∏ä‡πâ userId ‡∏à‡∏≤‡∏Å event ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö userId ‡πÉ‡∏ô‡∏õ‡∏∏‡πà‡∏°
                    // ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô LINE ‡∏ô‡∏±‡πâ‡∏ô‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡πÅ‡∏•‡πâ‡∏ß

                    let responseMessages: Message[] = [];
                    
                    switch (action) {
                        case 'dashboard':
                            // Dashboard - ‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏ó‡∏ô‡∏•‡∏¥‡∏á‡∏Å‡πå
                            responseMessages = [
                                {
                                    type: 'text',
                                    text: `üìä Dashboard\n‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì`
                                },
                                {
                                    type: 'template',
                                    altText: '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà Dashboard',
                                    template: {
                                        type: 'buttons',
                                        text: 'üîó ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö',
                                        actions: [
                                            {
                                                type: 'uri',
                                                label: 'üìä ‡πÄ‡∏õ‡∏¥‡∏î Dashboard',
                                                uri: `https://fukuneko-app.vercel.app/dashboard?lineUserId=${userId}&auto=true`
                                            }
                                        ]
                                    }
                                }
                            ];
                            break;
                            
                        case 'subscription':
                            // Premium Package - ‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏ó‡∏ô‡∏•‡∏¥‡∏á‡∏Å‡πå
                            responseMessages = [
                                {
                                    type: 'text',
                                    text: `üíé ‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à Premium\n\nüê± ‡∏ü‡∏£‡∏µ: 0 ‡∏ö‡∏≤‡∏ó (100 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)\nüëë ‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢‡∏°: 99 ‡∏ö‡∏≤‡∏ó/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î)`
                                },
                                {
                                    type: 'template',
                                    altText: '‡∏î‡∏π‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à Premium',
                                    template: {
                                        type: 'buttons',
                                        text: 'üöÄ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à',
                                        actions: [
                                            {
                                                type: 'uri',
                                                label: 'ÔøΩ ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î',
                                                uri: `https://fukuneko-app.vercel.app/premium?lineUserId=${userId}&auto=true`
                                            }
                                        ]
                                    }
                                }
                            ];
                            break;

                        case 'summary':
                            // ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô - ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡πÉ‡∏´‡∏°‡πà
                            responseMessages = await LineService.getOverviewMessageWithButtons(userId);
                            break;

                        case 'expense_examples':
                            // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢
                            responseMessages = [
                                {
                                    type: 'text',
                                    text: 'üí∏ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢:\n\n‚Ä¢ "50 ‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡πÅ‡∏ü"\n‚Ä¢ "80 ‡∏Ç‡πâ‡∏≤‡∏ß‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á"\n‚Ä¢ "15 ‡∏ô‡πâ‡∏≥‡∏î‡∏∑‡πà‡∏°"\n‚Ä¢ "800 ‡∏Ñ‡πà‡∏≤‡πÑ‡∏ü"\n‚Ä¢ "300 ‡πÄ‡∏ï‡∏¥‡∏°‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô"\n‚Ä¢ "150 ‡∏¢‡∏≤‡∏™‡∏≤‡∏°‡∏±‡∏ç"\n‚Ä¢ "50 ‡∏Ñ‡πà‡∏≤‡∏£‡∏ñ‡πÄ‡∏°‡∏•‡πå"\n‚Ä¢ "200 ‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡πÉ‡∏´‡∏°‡πà"\n\nüí° ‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö: ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥!'
                                }
                            ];
                            break;

                        case 'income_examples':
                            // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö
                            responseMessages = [
                                {
                                    type: 'text',
                                    text: 'üí∞ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö:\n\n‚Ä¢ "30000 ‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"\n‚Ä¢ "500 ‡∏Ñ‡πà‡∏≤‡∏•‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤"\n‚Ä¢ "1000 ‡πÇ‡∏ö‡∏ô‡∏±‡∏™"\n‚Ä¢ "200 ‡∏Ç‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡πÄ‡∏Å‡πà‡∏≤"\n‚Ä¢ "150 ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏∑‡∏ô"\n‚Ä¢ "100 ‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢"\n‚Ä¢ "2000 ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏û‡∏¥‡πÄ‡∏®‡∏©"\n\nüí° ‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö: ‡∏£‡∏∞‡∏ö‡∏∏‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥!'
                                }
                            ];
                            break;

                        case 'status':
                            // ‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏û‡∏Ñ‡πÄ‡∏Å‡∏à
                            responseMessages = await LineService.handleMessage('‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞', userId);
                            break;
                            
                        case 'home':
                            // ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å - ‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏ó‡∏ô‡∏•‡∏¥‡∏á‡∏Å‡πå
                            responseMessages = [
                                {
                                    type: 'text',
                                    text: `üè† Fuku Neko\n‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß`
                                },
                                {
                                    type: 'template',
                                    altText: '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å',
                                    template: {
                                        type: 'buttons',
                                        text: 'üåü ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô',
                                        actions: [
                                            {
                                                type: 'uri',
                                                label: 'üè† ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å',
                                                uri: `https://fukuneko-app.vercel.app/?lineUserId=${userId}&auto=true`
                                            }
                                        ]
                                    }
                                }
                            ];
                            break;
                            
                        case 'categories':
                            // ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà - ‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏á LINE User ID ‡πÄ‡∏õ‡πá‡∏ô internal user ID
                            try {
                                let user = await DatabaseService.getUserByLineId(userId);
                                if (!user) {
                                    // Auto-register user ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
                                    const displayName = await getDisplayName(userId);
                                    user = await DatabaseService.createUser(userId, displayName);
                                }
                                
                                responseMessages = await LineService.getCategoriesMessageWithButtons(user.id);
                            } catch (error) {
                                console.error('Error getting categories:', error);
                                responseMessages = [{
                                    type: 'text',
                                    text: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà'
                                }];
                            }
                            break;
                            
                        case 'budget':
                            // ‡πÅ‡∏™‡∏î‡∏á‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì - ‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏á LINE User ID ‡πÄ‡∏õ‡πá‡∏ô internal user ID
                            try {
                                let user = await DatabaseService.getUserByLineId(userId);
                                if (!user) {
                                    // Auto-register user ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
                                    const displayName = await getDisplayName(userId);
                                    user = await DatabaseService.createUser(userId, displayName);
                                }
                                
                                responseMessages = await LineService.getBudgetMessageWithButtons(user.id);
                            } catch (error) {
                                console.error('Error getting budget:', error);
                                responseMessages = [{
                                    type: 'text',
                                    text: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì'
                                }];
                            }
                            break;
                            
                        default:
                            responseMessages = [{
                                type: 'text',
                                text: '‚ùå ‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
                            }];
                    }

                    // ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
                    if (event.replyToken && responseMessages.length > 0) {
                        await LineService.replyMessage(event.replyToken, responseMessages);
                    }
                }
                else if (event.type === 'follow') {
                    // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ñ‡∏ô‡πÅ‡∏≠‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô - ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
                    const userId = event.source.userId;
                    if (userId) {
                        const displayName = await getDisplayName(userId);
                        
                        // ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
                        try {
                            await DatabaseService.createUser(userId, displayName);
                            console.log(`‚úÖ User registered successfully: ${userId} (${displayName})`);
                        } catch (error) {
                            console.error('Failed to register user on follow:', error);
                        }
                        
                        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö
                        await LineService.handleMessage('‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠', userId, displayName);
                    }
                }
            } catch (eventError) {
                console.error('Error processing event:', event, eventError);
                // ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö event ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡πÅ‡∏°‡πâ‡∏à‡∏∞‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
            }
        }

        return NextResponse.json({ status: 'ok' });
    } catch (error) {
        console.error('Webhook Error:', error);
        // ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö status 200 ‡πÅ‡∏°‡πâ‡∏à‡∏∞‡πÄ‡∏Å‡∏¥‡∏î error ‡∏ù‡∏±‡πà‡∏á‡πÄ‡∏£‡∏≤
        // ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô LINE ‡∏™‡πà‡∏á request ‡πÄ‡∏î‡∏¥‡∏°‡∏°‡∏≤‡∏ã‡πâ‡∏≥‡πÜ
        return NextResponse.json({ status: 'error', message: (error as Error).message });
    }
}
