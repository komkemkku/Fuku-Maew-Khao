import { NextRequest, NextResponse } from 'next/server';
import { WebhookRequestBody, validateSignature, Client } from '@line/bot-sdk';
import { LineService } from '@/lib/line-service';

// ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö LINE
const lineConfig = {
    channelAccessToken: process.env.LINE_CHANNEL_ACCESS_TOKEN || '',
    channelSecret: process.env.LINE_CHANNEL_SECRET || '',
};

const client = new Client(lineConfig);

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å LINE
async function getDisplayName(userId: string): Promise<string | undefined> {
    try {
        const profile = await client.getProfile(userId);
        return profile.displayName;
    } catch (error) {
        console.error('Error getting user profile:', error);
        return undefined;
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö Request ‡∏à‡∏≤‡∏Å LINE
export async function POST(req: NextRequest) {
    try {
        console.log('üì® Webhook received');
        console.log('Headers:', Object.fromEntries(req.headers.entries()));

        const bodyText = await req.text();
        console.log('Raw body:', bodyText);

        const body: WebhookRequestBody = JSON.parse(bodyText);
        const signature = req.headers.get('x-line-signature') || '';

        console.log('Parsed body:', JSON.stringify(body, null, 2));
        console.log('Signature:', signature);

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤ Request ‡∏°‡∏≤‡∏à‡∏≤‡∏Å LINE ‡∏à‡∏£‡∏¥‡∏á‡πÜ
        const isValidSignature = validateSignature(bodyText, lineConfig.channelSecret, signature);
        console.log('Signature validation result:', isValidSignature);

        if (!isValidSignature) {
            console.error('Invalid signature');
            return new NextResponse('Invalid signature', { status: 401 });
        }

        console.log('‚úÖ Signature validated');
        console.log('Received events:', JSON.stringify(body.events, null, 2));

        // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞ event
        for (const event of body.events) {
            try {
                if (event.type === 'message' && event.message.type === 'text') {
                    const userId = event.source.userId;
                    if (!userId) continue;

                    const userMessage = event.message.text;
                    const displayName = event.source.type === 'user'
                        ? await getDisplayName(userId)
                        : undefined;

                    console.log(`User ${userId} sent message: ${userMessage}`);

                    // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
                    const responseMessages = await LineService.handleMessage(
                        userMessage,
                        userId,
                        displayName
                    );

                    console.log('Response messages:', JSON.stringify(responseMessages, null, 2));

                    // ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
                    if (event.replyToken && responseMessages && responseMessages.length > 0) {
                        console.log(`Replying with ${responseMessages.length} messages...`);
                        await LineService.replyMessage(event.replyToken, responseMessages);
                        console.log('‚úÖ Reply sent successfully');
                    } else {
                        console.log('‚ö†Ô∏è No reply token or no response messages');
                    }
                }
                else if (event.type === 'follow') {
                    // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ñ‡∏ô‡πÅ‡∏≠‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô
                    const userId = event.source.userId;
                    if (userId) {
                        const displayName = await getDisplayName(userId);
                        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢‡∏™‡∏∏‡∏î‡∏ô‡πà‡∏≤‡∏£‡∏±‡∏Å‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏Ñ‡πå
                        const greetings = [
                            `üåü ‡πÄ‡∏´‡∏°‡∏µ‡∏¢‡∏ß~ ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏à‡πâ‡∏≤${displayName ? ' ‡∏Ñ‡∏∏‡∏ì' + displayName : ''}! ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡πÇ‡∏•‡∏Å‡∏ô‡πà‡∏≤‡∏£‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏ü‡∏π‡∏Å‡∏∏‡∏ô‡∏∞‡∏Ñ‡∏∞ üò∏\n\n` +
                            `üí´ ‡∏ü‡∏π‡∏Å‡∏∏‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏ó‡∏≤‡∏™ ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≠‡∏¢‡∏î‡∏π‡πÅ‡∏•‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÄ‡∏™‡∏°‡∏≠~\n\n` +
                            `üé™ ‡∏•‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå '‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡πÄ‡∏ß‡∏ó‡∏°‡∏ô‡∏ï‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ü‡∏π‡∏Å‡∏∏‡∏ó‡∏≥‡πÑ‡∏î‡πâ ‡∏´‡∏£‡∏∑‡∏≠ '‡πÅ‡∏°‡∏ß‡∏ü‡∏£‡∏µ' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ç‡∏ß‡∏±‡∏ç‡πÅ‡∏°‡∏ß‡∏ô‡πà‡∏≤‡∏£‡∏±‡∏Å‡∏ü‡∏£‡∏µ! üêæ\n\n` +
                            `üíé ‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡πâ‡∏≤‡∏ó‡∏≤‡∏™‡∏≠‡∏¢‡∏≤‡∏Å‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô‡∏ü‡∏π‡∏Å‡∏∏ ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î‡πÄ‡∏õ‡πá‡∏ô Premium ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Ñ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏´‡∏±‡∏®‡∏à‡∏£‡∏£‡∏¢‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÑ‡∏î‡πâ‡∏ô‡∏∞! ‚ú®`,
                            
                            `üêæ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏ô‡∏∞‡∏Ñ‡∏∞${displayName ? ' ‡∏Ñ‡∏∏‡∏ì' + displayName : ''}! üíï\n\n` +
                            `üå∏ ‡∏ü‡∏π‡∏Å‡∏∏‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏Ñ‡∏∏‡∏¢‡∏™‡∏∏‡∏î‡∏ô‡πà‡∏≤‡∏£‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏ó‡∏≤‡∏™‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞~\n\n` +
                            `üé≠ ‡∏°‡∏≤‡∏•‡∏≠‡∏á‡πÄ‡∏•‡πà‡∏ô‡∏Å‡∏±‡∏ô‡πÄ‡∏ñ‡∏≠‡∏∞! ‡∏û‡∏¥‡∏°‡∏û‡πå '50 ‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡πÅ‡∏ü' ‡∏´‡∏£‡∏∑‡∏≠ '‡∏™‡∏£‡∏∏‡∏õ' ‡∏î‡∏π‡∏™‡∏¥ ‡∏ü‡∏π‡∏Å‡∏∏‡∏à‡∏∞‡πÇ‡∏ä‡∏ß‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Å‡πà‡∏á‡πÉ‡∏´‡πâ‡∏î‡∏π! ‚ú®\n` +
                            `üìö ‡∏≠‡∏¢‡∏≤‡∏Å‡∏£‡∏π‡πâ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏ü‡∏π‡∏Å‡∏∏‡πÑ‡∏´‡∏°? ‡∏û‡∏¥‡∏°‡∏û‡πå '‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠' ‡∏°‡∏≤‡∏Ñ‡πà‡∏∞!\n\n` +
                            `üíù ‡πÄ‡∏à‡πâ‡∏≤‡∏ó‡∏≤‡∏™‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô‡∏ü‡∏π‡∏Å‡∏∏‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î Premium ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Ñ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏û‡∏¥‡πÄ‡∏®‡∏©‡πÑ‡∏î‡πâ‡∏ô‡∏∞! üò∏`,
                            
                            `‚ú® ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏°‡∏≤‡∏Å‡πÜ ‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏ü‡∏π‡∏Å‡∏∏‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ô‡∏∞‡∏Ñ‡∏∞! ü•∞\n\n` +
                            `üåà ‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏ó‡∏≤‡∏™‡πÄ‡∏ï‡πá‡∏°‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏≠‡∏¢‡∏¢‡∏¥‡πâ‡∏° ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç ‡πÅ‡∏•‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏≠‡∏á‡πÑ‡∏´‡∏•‡∏°‡∏≤‡πÄ‡∏ó‡∏°‡∏≤! ‡πÄ‡∏´‡∏°‡∏µ‡∏¢‡∏ß~ üí∞\n\n` +
                            `üéÅ ‡∏≠‡∏¢‡∏≤‡∏Å‡πÑ‡∏î‡πâ‡∏Ç‡∏≠‡∏á‡∏Ç‡∏ß‡∏±‡∏ç‡πÅ‡∏°‡∏ß‡∏ô‡πà‡∏≤‡∏£‡∏±‡∏Å‡∏ü‡∏£‡∏µ‡πÑ‡∏´‡∏°? ‡∏û‡∏¥‡∏°‡∏û‡πå '‡πÅ‡∏°‡∏ß‡∏ü‡∏£‡∏µ' ‡πÄ‡∏•‡∏¢! üòª\n` +
                            `üîÆ ‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏∞‡∏Ç‡∏≠‡∏Ñ‡∏≥‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏°‡∏á‡∏Ñ‡∏•‡∏Å‡πá‡πÑ‡∏î‡πâ‡∏ô‡∏∞~ ‡∏û‡∏¥‡∏°‡∏û‡πå '‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡πÄ‡∏°‡∏ô‡∏π‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏´‡∏±‡∏®‡∏à‡∏£‡∏£‡∏¢‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î!\n\n` +
                            `üíú ‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡πâ‡∏≤‡∏ó‡∏≤‡∏™‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡∏ü‡∏π‡∏Å‡∏∏‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î Premium ‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏ü‡∏π‡∏Å‡∏∏‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏î‡πâ‡∏ô‡∏∞! üåü`
                        ];
                        const greeting = greetings[Math.floor(Math.random() * greetings.length)];
                        await LineService.replyMessage(event.replyToken, [
                            { type: 'text', text: greeting }
                        ]);
                    }
                }
            } catch (eventError) {
                console.error('Error processing event:', event, eventError);
                // ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö event ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡πÅ‡∏°‡πâ‡∏à‡∏∞‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏îot
            }
        }

        return NextResponse.json({ status: 'ok' });
    } catch (error) {
        console.error('Webhook Error:', error);
        // ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö status 200 ‡πÅ‡∏°‡πâ‡∏à‡∏∞‡πÄ‡∏Å‡∏¥‡∏î error ‡∏ù‡∏±‡πà‡∏á‡πÄ‡∏£‡∏≤
        // ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô LINE ‡∏™‡πà‡∏á request ‡πÄ‡∏î‡∏¥‡∏°‡∏°‡∏≤‡∏ã‡πâ‡∏≥‡πÜ
        return NextResponse.json({ status: 'error', message: (error as Error).message });
    }
}

// ‡πÄ‡∏û‡∏¥‡πà‡∏° GET method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö webhook
export async function GET() {
    return NextResponse.json({
        status: 'ok',
        message: 'Webhook is working',
        config: {
            hasAccessToken: !!process.env.LINE_CHANNEL_ACCESS_TOKEN,
            hasSecret: !!process.env.LINE_CHANNEL_SECRET,
            timestamp: new Date().toISOString()
        }
    });
}
