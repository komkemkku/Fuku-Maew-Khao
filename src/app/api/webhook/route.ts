import { NextRequest, NextResponse } from 'next/server';
import { WebhookRequestBody, validateSignature, Client, Message } from '@line/bot-sdk';
import { LineService } from '../../../lib/line-service';

// ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö LINE
const lineConfig = {
    channelAccessToken: process.env.LINE_CHANNEL_ACCESS_TOKEN || '',
    channelSecret: process.env.LINE_CHANNEL_SECRET || '',
};

const client = new Client(lineConfig);

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å LINE
async function getDisplayName(userId: string): Promise<string | undefined> {
    try {
        const profile = await client.getProfile(userId);
        return profile.displayName;
    } catch (error) {
        console.error('Error getting user profile:', error);
        return undefined;
    }
}

// GET method handler ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö health check
export async function GET() {
    return NextResponse.json({ 
        status: 'ok', 
        message: 'LINE Bot Webhook is running',
        timestamp: new Date().toISOString()
    });
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö Request ‡∏à‡∏≤‡∏Å LINE
export async function POST(req: NextRequest) {
    try {
        const body: WebhookRequestBody = await req.json();
        const signature = req.headers.get('x-line-signature') || '';

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤ Request ‡∏°‡∏≤‡∏à‡∏≤‡∏Å LINE ‡∏à‡∏£‡∏¥‡∏á‡πÜ
        if (!validateSignature(JSON.stringify(body), lineConfig.channelSecret, signature)) {
            console.error('Invalid signature');
            return new NextResponse('Invalid signature', { status: 401 });
        }

        console.log('‚úÖ Signature validated');
        console.log('Received events:', JSON.stringify(body.events, null, 2));

        // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞ event
        for (const event of body.events) {
            try {
                if (event.type === 'message' && event.message.type === 'text') {
                    const userId = event.source.userId;
                    if (!userId) continue;
                    
                    const userMessage = event.message.text;
                    const displayName = event.source.type === 'user' 
                        ? await getDisplayName(userId) 
                        : undefined;

                    console.log(`User ${userId} sent message: ${userMessage}`);

                    // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
                    const responseMessages = await LineService.handleMessage(
                        userMessage, 
                        userId, 
                        displayName
                    );

                    // ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
                    if (event.replyToken) {
                        await LineService.replyMessage(event.replyToken, responseMessages);
                    }
                }
                else if (event.type === 'message' && event.message.type === 'sticker') {
                    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏ï‡∏¥‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå
                    const userId = event.source.userId;
                    if (!userId) continue;
                    
                    const stickerMessage = event.message;

                    console.log(`User ${userId} sent sticker: packageId=${stickerMessage.packageId}, stickerId=${stickerMessage.stickerId}`);

                    // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏™‡∏ï‡∏¥‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
                    const responseMessages = LineService.handleStickerMessage(
                        stickerMessage.packageId, 
                        stickerMessage.stickerId
                    );

                    // ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
                    if (event.replyToken) {
                        await LineService.replyMessage(event.replyToken, responseMessages);
                    }
                }
                else if (event.type === 'postback') {
                    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ postback events ‡∏à‡∏≤‡∏Å‡∏õ‡∏∏‡πà‡∏°
                    const userId = event.source.userId;
                    if (!userId) continue;
                    
                    const postbackData = event.postback.data;
                    console.log(`User ${userId} pressed button: ${postbackData}`);

                    // ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• action ‡πÅ‡∏•‡∏∞ userId
                    const params = new URLSearchParams(postbackData);
                    const action = params.get('action');
                    const targetUserId = params.get('userId');
                    
                    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ userId ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô (security)
                    if (targetUserId !== userId) {
                        console.error('User ID mismatch in postback');
                        continue;
                    }

                    let responseMessages: Message[] = [];
                    
                    switch (action) {
                        case 'dashboard':
                            // ‡πÄ‡∏õ‡∏¥‡∏î dashboard URL - ‡πÉ‡∏ä‡πâ LINE User ID ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
                            responseMessages = [{
                                type: 'text',
                                text: `üìä Dashboard\n\nüîó ‡∏Å‡∏î‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π Dashboard ‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:\nhttps://fukuneko-app.vercel.app/dashboard?lineUserId=${userId}&auto=true`
                            }];
                            break;
                            
                        case 'subscription':
                            // ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤ subscription
                            responseMessages = [{
                                type: 'text',
                                text: `üíé Premium Subscription\n\nüîó ‡∏Å‡∏î‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î‡πÄ‡∏õ‡πá‡∏ô Premium:\nhttps://fukuneko-app.vercel.app/subscription?lineUserId=${userId}&auto=true`
                            }];
                            break;
                            
                        case 'home':
                            // ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å
                            responseMessages = [{
                                type: 'text',
                                text: `üè† ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å Fuku Neko\n\nüîó ‡∏Å‡∏î‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡πÅ‡∏û‡∏Ñ‡πÄ‡∏Å‡∏à:\nhttps://fukuneko-app.vercel.app/?lineUserId=${userId}&auto=true`
                            }];
                            break;
                            
                        case 'categories':
                            // ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
                            responseMessages = await LineService.getCategoriesMessageWithButtons(userId);
                            break;
                            
                        case 'budget':
                            // ‡πÅ‡∏™‡∏î‡∏á‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì
                            responseMessages = await LineService.getBudgetMessageWithButtons(userId);
                            break;
                            
                        default:
                            responseMessages = [{
                                type: 'text',
                                text: '‚ùå ‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
                            }];
                    }

                    // ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
                    if (event.replyToken && responseMessages.length > 0) {
                        await LineService.replyMessage(event.replyToken, responseMessages);
                    }
                }
                else if (event.type === 'follow') {
                    // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ñ‡∏ô‡πÅ‡∏≠‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô
                    const userId = event.source.userId;
                    if (userId) {
                        const displayName = await getDisplayName(userId);
                        await LineService.handleMessage('‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠', userId, displayName);
                    }
                }
            } catch (eventError) {
                console.error('Error processing event:', event, eventError);
                // ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö event ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡πÅ‡∏°‡πâ‡∏à‡∏∞‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
            }
        }

        return NextResponse.json({ status: 'ok' });
    } catch (error) {
        console.error('Webhook Error:', error);
        // ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö status 200 ‡πÅ‡∏°‡πâ‡∏à‡∏∞‡πÄ‡∏Å‡∏¥‡∏î error ‡∏ù‡∏±‡πà‡∏á‡πÄ‡∏£‡∏≤
        // ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô LINE ‡∏™‡πà‡∏á request ‡πÄ‡∏î‡∏¥‡∏°‡∏°‡∏≤‡∏ã‡πâ‡∏≥‡πÜ
        return NextResponse.json({ status: 'error', message: (error as Error).message });
    }
}
