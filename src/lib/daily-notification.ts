/**
 * Daily Notification Service
 * ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô
 */

import { Client, Message } from '@line/bot-sdk';
import { DatabaseService } from './database';
import { FortuneService } from './fortune-service';

interface User {
  id: string;
  line_user_id: string;
  display_name?: string;
  subscription_plan?: string;
}

const lineConfig = {
  channelAccessToken: process.env.LINE_CHANNEL_ACCESS_TOKEN!,
  channelSecret: process.env.LINE_CHANNEL_SECRET!,
};

const client = new Client(lineConfig);

export class DailyNotificationService {
  /**
   * ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢‡∏ï‡∏≠‡∏ô‡πÄ‡∏ä‡πâ‡∏≤‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô
   */
  static async sendMorningGreeting(): Promise<void> {
    try {
      console.log('üåÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢‡∏ï‡∏≠‡∏ô‡πÄ‡∏ä‡πâ‡∏≤...');
      
      // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
      const users = await this.getActiveUsers();
      
      for (const user of users) {
        try {
          const message = this.createMorningMessage(user);
          
          await client.pushMessage(user.line_user_id, message);
          
          // ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ rate limit
          await this.delay(100);
          
          console.log(`‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡πâ‡∏≤‡πÉ‡∏´‡πâ ${user.display_name || user.line_user_id} ‡πÅ‡∏•‡πâ‡∏ß`);
        } catch (error) {
          console.error(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡πâ ${user.line_user_id}:`, error);
        }
      }
      
      console.log('üéâ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢‡∏ï‡∏≠‡∏ô‡πÄ‡∏ä‡πâ‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô');
    } catch (error) {
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ä‡πâ‡∏≤:', error);
    }
  }

  /**
   * ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏£‡∏∏‡∏õ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô
   */
  static async sendEveningDigest(): Promise<void> {
    try {
      console.log('üåÜ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏£‡∏∏‡∏õ‡∏ï‡∏≠‡∏ô‡πÄ‡∏¢‡πá‡∏ô...');
      
      const users = await this.getActiveUsers();
      
      for (const user of users) {
        try {
          const message = await this.createEveningDigestMessage(user);
          
          await client.pushMessage(user.line_user_id, message);
          await this.delay(100);
          
          console.log(`‚úÖ ‡∏™‡πà‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏ï‡∏≠‡∏ô‡πÄ‡∏¢‡πá‡∏ô‡πÉ‡∏´‡πâ ${user.display_name || user.line_user_id} ‡πÅ‡∏•‡πâ‡∏ß`);
        } catch (error) {
          console.error(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏™‡∏£‡∏∏‡∏õ‡πÉ‡∏´‡πâ ${user.line_user_id}:`, error);
        }
      }
      
      console.log('üéâ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏£‡∏∏‡∏õ‡∏ï‡∏≠‡∏ô‡πÄ‡∏¢‡πá‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô');
    } catch (error) {
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏¢‡πá‡∏ô:', error);
    }
  }

  /**
   * ‡∏™‡πà‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå
   */
  static async sendWeeklyBudgetReminder(): Promise<void> {
    try {
      console.log('üìä ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡πà‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå...');
      
      const users = await this.getActiveUsers();
      
      for (const user of users) {
        try {
          const message = await this.createWeeklyBudgetMessage(user);
          
          if (message) {
            await client.pushMessage(user.line_user_id, message);
            await this.delay(100);
            
            console.log(`‚úÖ ‡∏™‡πà‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡πÉ‡∏´‡πâ ${user.display_name || user.line_user_id} ‡πÅ‡∏•‡πâ‡∏ß`);
          }
        } catch (error) {
          console.error(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡πÉ‡∏´‡πâ ${user.line_user_id}:`, error);
        }
      }
      
      console.log('üéâ ‡∏™‡πà‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô');
    } catch (error) {
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì:', error);
    }
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢‡∏ï‡∏≠‡∏ô‡πÄ‡∏ä‡πâ‡∏≤
   */
  private static createMorningMessage(user: User): Message {
    const greetings = [
      `üåÖ ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏ï‡∏≠‡∏ô‡πÄ‡∏ä‡πâ‡∏≤ ${user.display_name || '‡πÄ‡∏à‡πâ‡∏≤‡∏ó‡∏≤‡∏™'}! üò∏`,
      `üå§Ô∏è ‡∏≠‡∏£‡∏∏‡∏ì‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏¥‡πå ${user.display_name || '‡∏Ñ‡∏∏‡∏ì'}! ‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡∏∞~`,
      `‚òÄÔ∏è ‡∏ü‡∏π‡∏Å‡∏∏‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ô‡∏∞ ${user.display_name || '‡πÄ‡∏à‡πâ‡∏≤‡∏ó‡∏≤‡∏™‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏Å'}!`,
      `üåà ‡πÄ‡∏ä‡πâ‡∏≤‡∏î‡∏µ‡πÜ ${user.display_name || '‡∏Ñ‡∏∏‡∏ì'}! ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏≥‡∏ú‡∏•‡∏á‡∏≤‡∏ô‡∏î‡∏µ‡πÜ ‡∏Å‡∏±‡∏ô‡∏°‡∏±‡πâ‡∏¢?`,
      `üåû ‡∏£‡∏∏‡πà‡∏á‡∏≠‡∏£‡∏∏‡∏ì‡πÅ‡∏•‡πâ‡∏ß ${user.display_name || '‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô'}! ‡∏ü‡∏π‡∏Å‡∏∏‡∏´‡∏ß‡∏±‡∏á‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ`
    ];

    const randomGreeting = greetings[Math.floor(Math.random() * greetings.length)];
    const fortune = FortuneService.getTimeBasedFortune();
    
    const tips = [
      "üí° ‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ: ‡∏•‡∏≠‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö-‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢‡∏ú‡πà‡∏≤‡∏ô‡∏ü‡∏π‡∏Å‡∏∏‡πÄ‡∏•‡∏¢‡∏ô‡∏∞!",
      "üìù ‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏ô‡∏∞",
      "üéØ ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏°‡πÄ‡∏•‡πá‡∏Å‡πÜ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏î‡∏π‡∏°‡∏±‡πâ‡∏¢?",
      "üåü ‡∏û‡∏¥‡∏°‡∏û‡πå '‡∏™‡∏£‡∏∏‡∏õ' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠",
      "üò∫ ‡∏ü‡∏π‡∏Å‡∏∏‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ä‡πà‡∏ß‡∏¢‡∏î‡∏π‡πÅ‡∏•‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏™‡∏°‡∏≠!"
    ];

    const randomTip = tips[Math.floor(Math.random() * tips.length)];

    return {
      type: 'text' as const,
      text: `${randomGreeting}\n\n${fortune}\n\n${randomTip}`
    };
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏£‡∏∏‡∏õ‡∏ï‡∏≠‡∏ô‡πÄ‡∏¢‡πá‡∏ô
   */
  private static async createEveningDigestMessage(user: User): Promise<Message> {
    try {
      const today = new Date();
      const transactions = await DatabaseService.getUserTransactions(user.id);

      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
      const todayTransactions = transactions?.filter(t => {
        const transactionDate = new Date(t.created_at);
        return transactionDate.toDateString() === today.toDateString();
      }) || [];

      const todayIncome = todayTransactions
        .filter(t => t.amount > 0)
        .reduce((sum, t) => sum + t.amount, 0);

      const todayExpense = todayTransactions
        .filter(t => t.amount < 0)
        .reduce((sum, t) => sum + Math.abs(t.amount), 0);

      let summaryText = `üåÜ ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô‡∏Ç‡∏≠‡∏á ${user.display_name || '‡∏Ñ‡∏∏‡∏ì'}\n\n`;

      if (todayTransactions.length === 0) {
        summaryText += `üìù ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏î‡πÜ\n\n`;
        summaryText += `üí° ‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö-‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢‡∏ô‡∏∞ ‡∏ü‡∏π‡∏Å‡∏∏‡∏ä‡πà‡∏ß‡∏¢‡∏î‡∏π‡πÅ‡∏•‡πÉ‡∏´‡πâ!`;
      } else {
        summaryText += `üìä ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${todayTransactions.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n`;
        
        if (todayIncome > 0) {
          summaryText += `üí∞ ‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö: +${todayIncome.toLocaleString()} ‡∏ö‡∏≤‡∏ó\n`;
        }
        
        if (todayExpense > 0) {
          summaryText += `üí∏ ‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢: -${todayExpense.toLocaleString()} ‡∏ö‡∏≤‡∏ó\n`;
        }

        const netAmount = todayIncome - todayExpense;
        summaryText += `\nüìà ‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ: ${netAmount >= 0 ? '+' : ''}${netAmount.toLocaleString()} ‡∏ö‡∏≤‡∏ó`;

        if (netAmount > 0) {
          summaryText += `\n\nüéâ ‡πÄ‡∏Å‡πà‡∏á‡∏°‡∏≤‡∏Å! ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏´‡∏•‡∏∑‡∏≠`;
        } else if (netAmount < 0) {
          summaryText += `\n\nüí™ ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏£ ‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ‡∏£‡∏∞‡∏ß‡∏±‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏´‡∏ô‡πà‡∏≠‡∏¢‡∏ô‡∏∞`;
        }
      }

      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ï‡∏≠‡∏ô‡πÄ‡∏¢‡πá‡∏ô
      const eveningFortune = FortuneService.getTimeBasedFortune();
      summaryText += `\n\n${eveningFortune}`;

      return {
        type: 'text' as const,
        text: summaryText
      };
    } catch (error) {
      console.error('Error creating evening digest:', error);
      return {
        type: 'text' as const,
        text: `üåÜ ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏ï‡∏≠‡∏ô‡πÄ‡∏¢‡πá‡∏ô ${user.display_name || '‡∏Ñ‡∏∏‡∏ì'}!\n\n${FortuneService.getTimeBasedFortune()}`
      };
    }
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå
   */
  private static async createWeeklyBudgetMessage(user: User): Promise<Message | null> {
    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡πÑ‡∏ß‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const categories = await DatabaseService.getUserCategories(user.id);
      const budgetCategories = categories?.filter(c => c.budget_amount && c.budget_amount > 0) || [];

      if (budgetCategories.length === 0) {
        return null; // ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì
      }

      const today = new Date();
      const weekStart = new Date(today.setDate(today.getDate() - today.getDay()));
      
      let budgetText = `üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ô‡∏µ‡πâ\n\n`;

      for (const category of budgetCategories) {
        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡πÉ‡∏ô‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ô‡∏µ‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ô‡∏µ‡πâ
        const weeklyTransactions = await this.getWeeklyTransactionsByCategory(user.id, category.id, weekStart);
        const weeklySpent = weeklyTransactions.reduce((sum, t) => sum + Math.abs(t.amount), 0);
        const budget = category.budget_amount || 0;
        const percentage = budget > 0 ? (weeklySpent / budget) * 100 : 0;

        budgetText += `üìÅ ${category.name}\n`;
        budgetText += `   ‡πÉ‡∏ä‡πâ‡πÑ‡∏õ: ${weeklySpent.toLocaleString()} / ${budget.toLocaleString()} ‡∏ö‡∏≤‡∏ó (${percentage.toFixed(1)}%)\n`;
        
        if (percentage >= 90) {
          budgetText += `   ‚ö†Ô∏è ‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Å‡∏¥‡∏ô‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡πÅ‡∏•‡πâ‡∏ß!\n`;
        } else if (percentage >= 70) {
          budgetText += `   üü° ‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡∏°‡∏≤‡∏Å‡πÅ‡∏•‡πâ‡∏ß‡∏ô‡∏∞\n`;
        } else {
          budgetText += `   ‚úÖ ‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ\n`;
        }
        budgetText += `\n`;
      }

      budgetText += `üí° ‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°`;

      return {
        type: 'text' as const,
        text: budgetText
      };
    } catch (error) {
      console.error('Error creating weekly budget message:', error);
      return null;
    }
  }

  /**
   * ‡∏î‡∏∂‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ô‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ)
   */
  private static async getActiveUsers(): Promise<User[]> {
    try {
      // ‡∏î‡∏∂‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 30 ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤
      const users = await DatabaseService.getActiveUsers(30);
      return users || [];
    } catch (error) {
      console.error('Error getting active users:', error);
      return [];
    }
  }

  /**
   * ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ô category ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ô‡∏µ‡πâ
   */
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  private static async getWeeklyTransactionsByCategory(userId: string, categoryId: string, weekStart: Date): Promise<any[]> {
    try {
      const transactions = await DatabaseService.getUserTransactions(userId);
      
      return transactions?.filter(t => {
        const transactionDate = new Date(t.created_at);
        const weekEnd = new Date(weekStart.getTime() + 7 * 24 * 60 * 60 * 1000);
        
        return t.category_id === categoryId && 
               transactionDate >= weekStart && 
               transactionDate <= weekEnd &&
               t.amount < 0; // ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢
      }) || [];
    } catch (error) {
      console.error('Error getting weekly transactions by category:', error);
      return [];
    }
  }

  /**
   * ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤
   */
  private static delay(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  /**
   * ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö)
   */
  static async sendTestMessage(userId: string, messageType: 'morning' | 'evening' | 'weekly'): Promise<void> {
    try {
      const user = await DatabaseService.getUserByLineId(userId);
      if (!user) {
        throw new Error('User not found');
      }

      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      let message: any;
      
      switch (messageType) {
        case 'morning':
          message = this.createMorningMessage(user);
          break;
        case 'evening':
          message = await this.createEveningDigestMessage(user);
          break;
        case 'weekly':
          message = await this.createWeeklyBudgetMessage(user);
          break;
        default:
          throw new Error('Invalid message type');
      }

      if (message) {
        await client.pushMessage(userId, message);
        console.log(`‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö (${messageType}) ‡πÉ‡∏´‡πâ ${userId} ‡πÅ‡∏•‡πâ‡∏ß`);
      } else {
        console.log(`‚ÑπÔ∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ${messageType} ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ ${userId}`);
      }
    } catch (error) {
      console.error(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ ${userId}:`, error);
      throw error;
    }
  }
}
