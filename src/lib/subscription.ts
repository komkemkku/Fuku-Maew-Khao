import { SubscriptionFeatures } from '@/types';

export class SubscriptionService {
  /**
   * Get subscription features for free plan
   */
  static getFreeFeatures(): SubscriptionFeatures {
    return {
      receiptOCR: false,
      advancedReports: false,
      smartNotifications: false,
      noAds: false,
      categoryLimit: 15, // ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
      transactionLimit: 100, // ‡∏à‡∏≥‡∏Å‡∏±‡∏î 100 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
      budgetAlerts: false,
      exportData: false,
      prioritySupport: false
    };
  }

  /**
   * Get subscription features for premium plan
   */
  static getPremiumFeatures(): SubscriptionFeatures {
    return {
      receiptOCR: true,
      advancedReports: true,
      smartNotifications: true,
      noAds: true,
      categoryLimit: -1, // ‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î
      transactionLimit: -1, // ‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î
      budgetAlerts: true,
      exportData: true,
      prioritySupport: true
    };
  }

  /**
   * Get features based on subscription plan
   */
  static getFeatures(plan: 'free' | 'premium'): SubscriptionFeatures {
    return plan === 'premium' ? this.getPremiumFeatures() : this.getFreeFeatures();
  }

  /**
   * Check if user can access a specific feature
   */
  static canAccessFeature(plan: 'free' | 'premium', feature: keyof SubscriptionFeatures): boolean {
    const features = this.getFeatures(plan);
    return !!features[feature];
  }

  /**
   * Get subscription plan pricing
   */
  static getPricing() {
    return {
      free: {
        name: '‡∏ü‡∏£‡∏µ',
        price: 0,
        duration: '‡∏ï‡∏•‡∏≠‡∏î‡∏ä‡∏µ‡∏û',
        features: [
          '‚úÖ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö-‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô',
          '‚úÖ ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô 15 ‡∏´‡∏°‡∏ß‡∏î',
          '‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ 100 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô',
          '‚úÖ ‡∏î‡∏π‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô',
          '‚úÖ ‡πÅ‡∏ä‡∏ó‡∏Å‡∏±‡∏ö‡∏ü‡∏π‡∏Å‡∏∏‡πÅ‡∏°‡∏ß',
          '‚ùå ‡∏≠‡πà‡∏≤‡∏ô‡∏™‡∏•‡∏¥‡∏õ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥',
          '‚ùå ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á',
          '‚ùå ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞',
          '‚ùå ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'
        ]
      },
      premium: {
        name: '‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢‡∏°',
        price: 99,
        duration: '‡∏ï‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô',
        features: [
          '‚úÖ ‡∏ó‡∏∏‡∏Å‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡πÅ‡∏û‡∏•‡∏ô‡∏ü‡∏£‡∏µ',
          '‚ú® ‡∏≠‡πà‡∏≤‡∏ô‡∏™‡∏•‡∏¥‡∏õ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ (‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à)',
          'üìä ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á + ‡∏Å‡∏£‡∏≤‡∏ü',
          'üîî ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞',
          'üö´ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏Ü‡∏©‡∏ì‡∏≤',
          'üìÇ ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î',
          'üìù ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î',
          'üíæ ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Excel/PDF',
          '‚≠ê ‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç'
        ]
      }
    };
  }

  /**
   * Get upgrade benefits message
   */
  static getUpgradeMessage(): string {
    const pricing = this.getPricing();
    
    return `üåü ‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î‡πÄ‡∏õ‡πá‡∏ô Fuku Neko Premium!\n\n` +
      `üíé ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏û‡∏µ‡∏¢‡∏á ${pricing.premium.price} ‡∏ö‡∏≤‡∏ó${pricing.premium.duration}\n\n` +
      `üéÅ ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö:\n` +
      pricing.premium.features.join('\n') + '\n\n' +
      `üì± ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà: ${process.env.APP_URL}/premium\n\n` +
      `üé™ ‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ü‡∏π‡∏Å‡∏∏‡πÉ‡∏´‡πâ‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ‡∏≠‡∏µ‡∏Å! üò∏`;
  }

  /**
   * Check if user has reached limits
   */
  static async checkLimits(plan: 'free' | 'premium', currentUsage: {
    categories: number;
    monthlyTransactions: number;
  }): Promise<{
    categoriesExceeded: boolean;
    transactionsExceeded: boolean;
    message?: string;
  }> {
    const features = this.getFeatures(plan);
    
    const categoriesExceeded = features.categoryLimit > 0 && currentUsage.categories >= features.categoryLimit;
    const transactionsExceeded = features.transactionLimit > 0 && currentUsage.monthlyTransactions >= features.transactionLimit;
    
    let message = '';
    
    if (categoriesExceeded && transactionsExceeded) {
      message = `üö´ ‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ‡∏Ñ‡∏£‡∏ö‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß!\n‚Ä¢ ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà: ${currentUsage.categories}/${features.categoryLimit}\n‚Ä¢ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô: ${currentUsage.monthlyTransactions}/${features.transactionLimit}\n\n${this.getUpgradeMessage()}`;
    } else if (categoriesExceeded) {
      message = `üö´ ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÄ‡∏ï‡πá‡∏°‡πÅ‡∏•‡πâ‡∏ß! (${currentUsage.categories}/${features.categoryLimit})\n\n${this.getUpgradeMessage()}`;
    } else if (transactionsExceeded) {
      message = `üö´ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏£‡∏ö‡πÇ‡∏Ñ‡∏ß‡∏ï‡πâ‡∏≤‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß! (${currentUsage.monthlyTransactions}/${features.transactionLimit})\n\n${this.getUpgradeMessage()}`;
    }
    
    return {
      categoriesExceeded,
      transactionsExceeded,
      message: message || undefined
    };
  }
}
