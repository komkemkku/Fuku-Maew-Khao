import { Client, Message } from '@line/bot-sdk';
import { DatabaseService } from './database';
import { Category } from '@/types';
import { CatApiService } from './cat-api';
import { FortuneService } from './fortune-service';

const lineConfig = {
  channelAccessToken: process.env.LINE_CHANNEL_ACCESS_TOKEN!,
  channelSecret: process.env.LINE_CHANNEL_SECRET!,
};

const client = new Client(lineConfig);

export class LineService {
  static async handleMessage(userMessage: string, userId: string, displayName?: string) {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const user = await DatabaseService.createUser(userId, displayName);
    
    // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    const response = await this.processUserMessage(userMessage, user.id);
    
    return response;
  }

  static async processUserMessage(message: string, userId: string): Promise<Message[]> {
    const text = message.trim().toLowerCase();

    // ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà Phase 1: ‡πÅ‡∏°‡∏ß‡∏ü‡∏£‡∏µ (‡∏£‡∏π‡∏õ‡πÅ‡∏°‡∏ß‡∏™‡∏∏‡πà‡∏°)
    if (text === '‡πÅ‡∏°‡∏ß‡∏ü‡∏£‡∏µ' || text === '‡∏£‡∏π‡∏õ‡πÅ‡∏°‡∏ß' || text === '‡πÅ‡∏°‡∏ß' || text === 'cat') {
      return await this.getCatImageMessage();
    }

    // ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà Phase 1: ‡πÅ‡∏°‡∏ß‡πÄ‡∏•‡∏µ‡∏¢ (‡πÄ‡∏ã‡∏µ‡∏¢‡∏°‡∏ã‡∏µ‡πÅ‡∏°‡∏ß)
    if (text === '‡πÅ‡∏°‡∏ß‡πÄ‡∏•‡∏µ‡∏¢' || text === '‡πÄ‡∏ã‡∏µ‡∏¢‡∏°‡∏ã‡∏µ' || text === '‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢' || text === 'fortune' || text === '‡∏Ñ‡∏≥‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢') {
      return this.getFortuneMessage();
    }

    // ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏û‡∏¥‡πÄ‡∏®‡∏©: ‡∏Ñ‡∏≥‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô
    if (text === '‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô' || text === '‡πÇ‡∏ä‡∏Ñ‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô' || text === '‡∏î‡∏ß‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô') {
      return this.getFinancialFortuneMessage();
    }

    // ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏î‡∏π‡∏™‡∏£‡∏∏‡∏õ
    if (text === '‡∏™‡∏£‡∏∏‡∏õ' || text === 'summary') {
      return await this.getSummaryMessage(userId);
    }

    // ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏î‡∏π‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
    if (text === '‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà' || text === 'categories') {
      return await this.getCategoriesMessage(userId);
    }

    // ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏î‡∏π‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì
    if (text === '‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì' || text === 'budget') {
      return await this.getBudgetMessage(userId);
    }

    // ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠
    if (text === 'help' || text === '‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠' || text === '‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ') {
      return this.getHelpMessage();
    }

    // ‡∏•‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö-‡∏à‡πà‡∏≤‡∏¢
    const transaction = this.parseTransactionMessage(message);
    if (transaction) {
      try {
        // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
        const categories = await DatabaseService.getUserCategories(userId);
        const category = this.findBestCategory(transaction.description || '', categories);

        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
        await DatabaseService.createTransaction(
          userId,
          transaction.amount,
          transaction.description,
          category?.id
        );

        return [{
          type: 'text',
          text: `‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\nüí∞ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: ${transaction.amount.toLocaleString()} ‡∏ö‡∏≤‡∏ó\nüìù ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: ${transaction.description}\nüìÇ ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà: ${category?.name || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}`
        }];
      } catch (error) {
        console.error('Error saving transaction:', error);
        return [{
          type: 'text',
          text: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
        }];
      }
    }

    // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à
    return [{
      type: 'text',
      text: 'ü§î ‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ\n\nüí° ‡∏•‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå:\n‚Ä¢ "‡πÅ‡∏°‡∏ß‡∏ü‡∏£‡∏µ" - ‡∏î‡∏π‡∏£‡∏π‡∏õ‡πÅ‡∏°‡∏ß‡∏™‡∏∏‡πà‡∏° üê±\n‚Ä¢ "‡πÅ‡∏°‡∏ß‡πÄ‡∏•‡∏µ‡∏¢" - ‡∏Ç‡∏≠‡∏Ñ‡∏≥‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ üîÆ\n‚Ä¢ "50 ‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡πÅ‡∏ü" - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢ üí∞\n‚Ä¢ "‡∏™‡∏£‡∏∏‡∏õ" - ‡∏î‡∏π‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô üìä\n‚Ä¢ "‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠" - ‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î üìù'
    }];
  }

  static parseTransactionMessage(message: string): { amount: number; description: string } | null {
    // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÄ‡∏ä‡πà‡∏ô:
    // "50 ‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡πÅ‡∏ü", "‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡πÅ‡∏ü 50", "50", "100 ‡∏ö‡∏≤‡∏ó ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏¢‡πá‡∏ô"
    
    const patterns = [
      /^(\d+(?:\.\d+)?)\s*‡∏ö‡∏≤‡∏ó?\s*(.*)$/i,      // "50 ‡∏ö‡∏≤‡∏ó ‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡πÅ‡∏ü"
      /^(.+?)\s+(\d+(?:\.\d+)?)\s*‡∏ö‡∏≤‡∏ó?$/i,     // "‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡πÅ‡∏ü 50 ‡∏ö‡∏≤‡∏ó"
      /^(\d+(?:\.\d+)?)\s+(.+)$/,              // "50 ‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡πÅ‡∏ü"
      /^(.+?)\s+(\d+(?:\.\d+)?)$/,             // "‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡πÅ‡∏ü 50"
      /^(\d+(?:\.\d+)?)\s*$/                   // "50"
    ];

    for (const pattern of patterns) {
      const match = message.trim().match(pattern);
      if (match) {
        if (pattern.source.startsWith('^(\\d+')) {
          // ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
          const amount = parseFloat(match[1]);
          const description = match[2]?.trim() || '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
          return { amount, description };
        } else {
          // ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
          const description = match[1].trim();
          const amount = parseFloat(match[2]);
          return { amount, description };
        }
      }
    }

    return null;
  }

  static findBestCategory(description: string, categories: Category[]) {
    const desc = description.toLowerCase();
    
    // ‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ï‡πà‡∏≤‡∏á‡πÜ
    const categoryKeywords = {
      '‡∏≠‡∏≤‡∏´‡∏≤‡∏£': ['‡∏≠‡∏≤‡∏´‡∏≤‡∏£', '‡∏Å‡∏≤‡πÅ‡∏ü', '‡∏Ç‡πâ‡∏≤‡∏ß', '‡∏Ç‡∏≠‡∏á‡∏Å‡∏¥‡∏ô', '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°', '‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£', '‡∏ü‡∏π‡πâ‡∏î'],
      '‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á': ['‡∏£‡∏ñ', '‡πÅ‡∏ó‡πá‡∏Å‡∏ã‡∏µ‡πà', '‡πÄ‡∏ö‡∏ô‡∏ã‡∏¥‡∏ô', '‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô', '‡∏£‡∏ñ‡πÄ‡∏°‡∏•‡πå', '‡∏£‡∏ñ‡πÑ‡∏ü', '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ö‡∏¥‡∏ô', 'grab'],
      '‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏ö‡πâ‡∏≤‡∏ô': ['‡πÑ‡∏ü', '‡∏ô‡πâ‡∏≥', '‡πÄ‡∏ô‡πá‡∏ï', '‡∏Ñ‡πà‡∏≤‡∏ö‡πâ‡∏≤‡∏ô', '‡∏Ñ‡πà‡∏≤‡πÑ‡∏ü', '‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥', '‡∏Ñ‡πà‡∏≤‡πÄ‡∏ä‡πà‡∏≤'],
      '‡∏ä‡πâ‡∏≠‡∏õ‡∏õ‡∏¥‡πâ‡∏á': ['‡∏ã‡∏∑‡πâ‡∏≠', '‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ú‡πâ‡∏≤', '‡∏£‡∏≠‡∏á‡πÄ‡∏ó‡πâ‡∏≤', '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏™‡∏≥‡∏≠‡∏≤‡∏á', '‡∏ä‡πâ‡∏≠‡∏õ'],
      '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ö‡∏±‡∏ô‡πÄ‡∏ó‡∏¥‡∏á': ['‡∏´‡∏ô‡∏±‡∏á', '‡πÄ‡∏Å‡∏°', '‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏ï', '‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß', '‡∏ö‡∏±‡∏ô‡πÄ‡∏ó‡∏¥‡∏á']
    };

    for (const category of categories) {
      if (category.type === 'expense') {
        const keywords = categoryKeywords[category.name as keyof typeof categoryKeywords];
        if (keywords && keywords.some(keyword => desc.includes(keyword))) {
          return category;
        }
      }
    }

    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà "‡∏≠‡∏∑‡πà‡∏ô‡πÜ" ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢
    return categories.find(c => c.name === '‡∏≠‡∏∑‡πà‡∏ô‡πÜ' && c.type === 'expense');
  }

  static async getSummaryMessage(userId: string): Promise<Message[]> {
    const now = new Date();
    const summary = await DatabaseService.getMonthlySummary(userId, now.getFullYear(), now.getMonth() + 1);

    const text = `üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ${now.getMonth() + 1}/${now.getFullYear()}\n\n` +
      `üí∞ ‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö: ${summary.total_income.toLocaleString()} ‡∏ö‡∏≤‡∏ó\n` +
      `üí∏ ‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢: ${summary.total_expense.toLocaleString()} ‡∏ö‡∏≤‡∏ó\n` +
      `üíµ ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: ${summary.net_amount.toLocaleString()} ‡∏ö‡∏≤‡∏ó\n\n` +
      `üì± ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏ó‡∏µ‡πà ${process.env.APP_URL}/dashboard`;

    return [{ type: 'text', text }];
  }

  static async getCategoriesMessage(userId: string): Promise<Message[]> {
    const categories = await DatabaseService.getUserCategories(userId);
    
    const incomeCategories = categories.filter(c => c.type === 'income');
    const expenseCategories = categories.filter(c => c.type === 'expense');

    let text = 'üìÇ ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì\n\n';
    
    if (incomeCategories.length > 0) {
      text += 'üí∞ ‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö:\n';
      incomeCategories.forEach(cat => {
        text += `‚Ä¢ ${cat.name}\n`;
      });
      text += '\n';
    }

    if (expenseCategories.length > 0) {
      text += 'üí∏ ‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢:\n';
      expenseCategories.forEach(cat => {
        text += `‚Ä¢ ${cat.name}`;
        if (cat.budget_amount) {
          text += ` (‡∏á‡∏ö: ${cat.budget_amount.toLocaleString()})`;
        }
        text += '\n';
      });
    }

    text += `\nüì± ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà ${process.env.APP_URL}/dashboard`;

    return [{ type: 'text', text }];
  }

  static async getBudgetMessage(userId: string): Promise<Message[]> {
    const now = new Date();
    const budgetStatus = await DatabaseService.getBudgetStatus(userId, now.getFullYear(), now.getMonth() + 1);

    if (budgetStatus.length === 0) {
      return [{
        type: 'text',
        text: 'üìä ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì\n\nüì± ‡∏ï‡∏±‡πâ‡∏á‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏ó‡∏µ‡πà ${process.env.APP_URL}/dashboard'
      }];
    }

    let text = `üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ${now.getMonth() + 1}/${now.getFullYear()}\n\n`;

    budgetStatus.forEach(budget => {
      const percentage = Math.round(budget.percentage_used);
      const status = percentage > 100 ? 'üî¥' : percentage > 80 ? 'üü°' : 'üü¢';
      
      text += `${status} ${budget.category_name}\n`;
      text += `   ‡πÉ‡∏ä‡πâ: ${budget.spent_amount.toLocaleString()}/${budget.budget_amount.toLocaleString()} ‡∏ö‡∏≤‡∏ó (${percentage}%)\n`;
      text += `   ‡πÄ‡∏´‡∏•‡∏∑‡∏≠: ${budget.remaining_amount.toLocaleString()} ‡∏ö‡∏≤‡∏ó\n\n`;
    });

    text += `üì± ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ó‡∏µ‡πà ${process.env.APP_URL}/dashboard`;

    return [{ type: 'text', text }];
  }

  static getHelpMessage(): Message[] {
    return [{
      type: 'text',
      text: `ü§ñ ‡∏ü‡∏π‡∏Å‡∏∏‡πÅ‡∏°‡∏ß‡∏Ç‡∏≤‡∏ß - ‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß\n\n` +
        `üé™ ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏™‡∏ô‡∏∏‡∏Å‡πÜ:\n` +
        `‚Ä¢ "‡πÅ‡∏°‡∏ß‡∏ü‡∏£‡∏µ" - ‡∏£‡∏π‡∏õ‡πÅ‡∏°‡∏ß‡∏™‡∏∏‡πà‡∏° ÔøΩ\n` +
        `‚Ä¢ "‡πÅ‡∏°‡∏ß‡πÄ‡∏•‡∏µ‡∏¢" - ‡∏Ñ‡∏≥‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ üîÆ\n` +
        `‚Ä¢ "‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô" - ‡∏î‡∏ß‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô üí∞\n\n` +
        `üìù ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£:\n` +
        `‚Ä¢ "50 ‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡πÅ‡∏ü"\n` +
        `‚Ä¢ "‡∏Ñ‡πà‡∏≤‡∏≠‡∏≤‡∏´‡∏≤‡∏£ 120"\n` +
        `‚Ä¢ "500 ‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"\n\n` +
        `üìä ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:\n` +
        `‚Ä¢ "‡∏™‡∏£‡∏∏‡∏õ" - ‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô\n` +
        `‚Ä¢ "‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà" - ‡∏î‡∏π‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà\n` +
        `‚Ä¢ "‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì" - ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏á‡∏ö\n\n` +
        `üì± ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á:\n` +
        `${process.env.APP_URL}/dashboard\n\n` +
        `üíé ‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î‡πÄ‡∏õ‡πá‡∏ô Premium:\n` +
        `‚Ä¢ ‡∏≠‡πà‡∏≤‡∏ô‡∏™‡∏•‡∏¥‡∏õ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥\n` +
        `‚Ä¢ ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á\n` +
        `‚Ä¢ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏Ü‡∏©‡∏ì‡∏≤`
    }];
  }

  /**
   * ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà: ‡πÅ‡∏°‡∏ß‡∏ü‡∏£‡∏µ (‡∏£‡∏π‡∏õ‡πÅ‡∏°‡∏ß‡∏™‡∏∏‡πà‡∏°)
   */
  static async getCatImageMessage(): Promise<Message[]> {
    try {
      const catImageUrl = await CatApiService.getCatImageWithFallback();
      
      return [
        {
          type: 'text',
          text: 'üê± ‡πÅ‡∏°‡∏ß‡∏ü‡∏£‡∏µ‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß! ‡∏£‡∏π‡∏õ‡πÅ‡∏°‡∏ß‡∏™‡∏∏‡πà‡∏°‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì ‚ú®'
        },
        {
          type: 'image',
          originalContentUrl: catImageUrl,
          previewImageUrl: catImageUrl
        },
        {
          type: 'text',
          text: '‡∏´‡∏ß‡∏±‡∏á‡∏ß‡πà‡∏≤‡πÅ‡∏°‡∏ß‡∏ï‡∏±‡∏ß‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏¥‡πâ‡∏°‡πÑ‡∏î‡πâ‡∏ô‡∏∞! üò∏\n\n‡∏û‡∏¥‡∏°‡∏û‡πå "‡πÅ‡∏°‡∏ß‡∏ü‡∏£‡∏µ" ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡πÅ‡∏°‡∏ß‡∏ï‡∏±‡∏ß‡πÉ‡∏´‡∏°‡πà üé™'
        }
      ];
    } catch (error) {
      console.error('Error getting cat image:', error);
      return [{
        type: 'text',
        text: 'üòø ‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©‡∏ô‡∏∞ ‡πÅ‡∏°‡∏ß‡∏´‡∏ô‡∏µ‡πÑ‡∏õ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏∑‡πà‡∏ô ‡∏•‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå "‡πÅ‡∏°‡∏ß‡∏ü‡∏£‡∏µ" ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏î‡∏π‡∏ô‡∏∞!'
      }];
    }
  }

  /**
   * ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà: ‡πÅ‡∏°‡∏ß‡πÄ‡∏•‡∏µ‡∏¢ (‡πÄ‡∏ã‡∏µ‡∏¢‡∏°‡∏ã‡∏µ‡πÅ‡∏°‡∏ß)
   */
  static getFortuneMessage(): Message[] {
    const fortune = FortuneService.getRandomFortune();
    
    return [{
      type: 'text',
      text: fortune + '\n\nüí´ ‡∏û‡∏¥‡∏°‡∏û‡πå "‡πÅ‡∏°‡∏ß‡πÄ‡∏•‡∏µ‡∏¢" ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏Ñ‡∏≥‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà ‡∏´‡∏£‡∏∑‡∏≠ "‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏î‡∏ß‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞!'
    }];
  }

  /**
   * ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏û‡∏¥‡πÄ‡∏®‡∏©: ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô
   */
  static getFinancialFortuneMessage(): Message[] {
    const fortune = FortuneService.getFinancialFortune();
    
    return [{
      type: 'text',
      text: fortune + '\n\nüìä ‡∏≠‡∏¢‡∏≤‡∏Å‡∏î‡∏π‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏£‡∏¥‡∏á‡πÑ‡∏´‡∏°? ‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏™‡∏£‡∏∏‡∏õ" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏¢‡∏≠‡∏î‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö-‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ!'
    }];
  }

  static async replyMessage(replyToken: string, messages: Message[]) {
    try {
      await client.replyMessage(replyToken, messages);
    } catch (error) {
      console.error('Error replying message:', error);
      throw error;
    }
  }

  static async pushMessage(userId: string, messages: Message[]) {
    try {
      await client.pushMessage(userId, messages);
    } catch (error) {
      console.error('Error pushing message:', error);
      throw error;
    }
  }
}
